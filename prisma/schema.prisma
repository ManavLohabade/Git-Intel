generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  firstName     String?
  lastName      String?
  credits       Int             @default(150)
  accounts      Account[]
  questionAsked Question[]
  sessions      Session[]
  userToProject UserToProject[]
}

model Project {
  id                  String                @id @default(cuid())
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  name                String
  githubUrl           String
  deletedAt           DateTime?
  Commit              Commit[]
  meeting             Meeting[]
  savedQuestions      Question[]
  SourceCodeEmbedding SourceCodeEmbedding[]
  userToProjects      UserToProject[]
}

model UserToProject {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model SourceCodeEmbedding {
  id               String                 @id @default(cuid())
  summaryEmbedding Unsupported("vector")?
  sourceCode       String
  fileName         String
  summary          String
  projectId        String
  project          Project                @relation(fields: [projectId], references: [id])
}

model Meeting {
  id         String        @id @default(cuid())
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  name       String
  meetingUrl String
  projectId  String
  status     MeetingStatus @default(PROCESSING)
  issues     Issue[]
  project    Project       @relation(fields: [projectId], references: [id])
}

model Issue {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  start     String
  end       String
  gist      String
  headline  String
  summary   String
  meetingId String
  meeting   Meeting  @relation(fields: [meetingId], references: [id])
}

model Question {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  question        String
  answer          String
  filesReferences Json?
  projectId       String
  userId          String
  project         Project  @relation(fields: [projectId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
}

model Commit {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  projectId          String
  commitMessage      String
  commitHash         String
  commitAuthorName   String
  commitAuthorAvatar String
  commitDate         DateTime
  summary            String
  project            Project  @relation(fields: [projectId], references: [id])
}

enum MeetingStatus {
  PROCESSING
  COMPLETED
}
